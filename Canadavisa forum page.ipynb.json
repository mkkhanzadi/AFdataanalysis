{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "import bs4\n",
    "from bs4 import BeautifulSoup as bs\n",
    "import csv\n",
    "import re\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import nltk\n",
    "import random\n",
    "# from https://github.com/pandas-dev/pandas/issues/22610\n",
    "import csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "#defining the url and using the ureq to read the website in html. This can be checked by print(canadavisa)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [],
   "source": [
    "canadavisa_url = 'https://www.canadavisa.com/canada-immigration-discussion-board/'\n",
    "canadavisa = requests.get(canadavisa_url).text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "#all topics are in tag 'h3' - using bs to find all data in h3 - Topic tag has changed from nodeTitle to node-title"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'Express Entry / Expression of Interest\\nNew': '/canada-immigration-discussion-board/forums/express-entry-expression-of-interest.54/', 'Skilled Worker / Professional Immigration\\nNew': '/canada-immigration-discussion-board/forums/skilled-worker-professional-immigration.4/', 'Canadian Experience Class\\nNew': '/canada-immigration-discussion-board/forums/canadian-experience-class.52/', 'Provincial Nomination Program Immigration\\nNew': '/canada-immigration-discussion-board/forums/provincial-nomination-program-immigration.6/', 'Family Class Sponsorship\\nNew': '/canada-immigration-discussion-board/forums/family-class-sponsorship.5/', 'Caregiver Pathways\\nNew': '/canada-immigration-discussion-board/forums/caregiver-pathways.65/', 'Quebec Immigration\\nNew': '/canada-immigration-discussion-board/forums/quebec-immigration.55/', 'Business Immigration\\nNew': '/canada-immigration-discussion-board/forums/business-immigration.7/', 'IELTS - CELPIP - TEF - TCF - Language Testing\\nNew': '/canada-immigration-discussion-board/forums/ielts-celpip-tef-tcf-language-testing.53/', 'Refugees and Asylum\\nNew': '/canada-immigration-discussion-board/forums/refugees-and-asylum.56/', 'General - All Canadian Immigration\\nNew': '/canada-immigration-discussion-board/forums/general-all-canadian-immigration.13/', 'Permanent Residence in Canada\\nNew': '/canada-immigration-discussion-board/forums/permanent-residence-in-canada.57/', 'Temporary Residence in Canada (Work, Study, Visit)\\nNew': '/canada-immigration-discussion-board/forums/temporary-residence-in-canada-work-study-visit.58/', 'H-1B Holders in the U.S.\\nNew': '/canada-immigration-discussion-board/forums/h-1b-holders-in-the-u-s.59/', 'Foreign Workers\\nNew': '/canada-immigration-discussion-board/forums/foreign-workers.10/', 'International Students\\nNew': '/canada-immigration-discussion-board/forums/international-students.2/', 'Visitors\\nNew': '/canada-immigration-discussion-board/forums/visitors.8/', 'Settlement Issues\\nNew': '/canada-immigration-discussion-board/forums/settlement-issues.14/', 'Permanent Residency Obligations\\nNew': '/canada-immigration-discussion-board/forums/permanent-residency-obligations.11/', 'Citizenship\\nNew': '/canada-immigration-discussion-board/forums/citizenship.12/', 'Housing\\nNew': '/canada-immigration-discussion-board/forums/housing.39/', 'Education\\nNew': '/canada-immigration-discussion-board/forums/education.41/', 'Health\\nNew': '/canada-immigration-discussion-board/forums/health.40/', 'Finding Work in Canada\\nNew': '/canada-immigration-discussion-board/forums/finding-work-in-canada.21/', 'Canadian Finance and Taxation\\nNew': '/canada-immigration-discussion-board/forums/canadian-finance-and-taxation.25/', 'Start Your Own Business in Canada – Self Employmen\\nNew': '/canada-immigration-discussion-board/forums/start-your-own-business-in-canada-%E2%80%93-self-employmen.22/', 'Canadian Labour Legislation\\nNew': '/canada-immigration-discussion-board/forums/canadian-labour-legislation.23/', 'Resources for Finding a Canadian Job\\nNew': '/canada-immigration-discussion-board/forums/resources-for-finding-a-canadian-job.24/', 'Visa Offices in North America\\nNew': '/canada-immigration-discussion-board/forums/visa-offices-in-north-america.18/', 'Visa Offices in South America\\nNew': '/canada-immigration-discussion-board/forums/visa-offices-in-south-america.19/', 'Visa Offices in Europe\\nNew': '/canada-immigration-discussion-board/forums/visa-offices-in-europe.17/', 'Visa Offices in Asia\\nNew': '/canada-immigration-discussion-board/forums/visa-offices-in-asia.16/', 'Visa Offices in Africa\\nNew': '/canada-immigration-discussion-board/forums/visa-offices-in-africa.15/', 'Visa Offices in Oceana\\nNew': '/canada-immigration-discussion-board/forums/visa-offices-in-oceana.20/'}\n"
     ]
    }
   ],
   "source": [
    "soup = bs(canadavisa, 'html.parser')\n",
    "\n",
    "topics = soup.find_all('h3', {'class':'node-title'})\n",
    "topic_titles = list(map(lambda h: h.text.strip(), topics))\n",
    "topic_titles_and_links = dict(map(lambda h: (h.text.strip(), h.find('a') ['href']), topics))\n",
    "print(topic_titles_and_links)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "LM's example of randomised topic selection. Uses [sampling without replacement](https://web.ma.utexas.edu/users/parker/sampling/repl.htm) to ensure the same topic is not selected twice ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Express Entry / Expression of Interest\\nNew': '/canada-immigration-discussion-board/forums/express-entry-expression-of-interest.54/',\n",
       " 'Skilled Worker / Professional Immigration\\nNew': '/canada-immigration-discussion-board/forums/skilled-worker-professional-immigration.4/',\n",
       " 'Canadian Experience Class\\nNew': '/canada-immigration-discussion-board/forums/canadian-experience-class.52/',\n",
       " 'Provincial Nomination Program Immigration\\nNew': '/canada-immigration-discussion-board/forums/provincial-nomination-program-immigration.6/',\n",
       " 'Family Class Sponsorship\\nNew': '/canada-immigration-discussion-board/forums/family-class-sponsorship.5/',\n",
       " 'Caregiver Pathways\\nNew': '/canada-immigration-discussion-board/forums/caregiver-pathways.65/',\n",
       " 'Quebec Immigration\\nNew': '/canada-immigration-discussion-board/forums/quebec-immigration.55/',\n",
       " 'Business Immigration\\nNew': '/canada-immigration-discussion-board/forums/business-immigration.7/',\n",
       " 'IELTS - CELPIP - TEF - TCF - Language Testing\\nNew': '/canada-immigration-discussion-board/forums/ielts-celpip-tef-tcf-language-testing.53/',\n",
       " 'Refugees and Asylum\\nNew': '/canada-immigration-discussion-board/forums/refugees-and-asylum.56/',\n",
       " 'General - All Canadian Immigration\\nNew': '/canada-immigration-discussion-board/forums/general-all-canadian-immigration.13/',\n",
       " 'Permanent Residence in Canada\\nNew': '/canada-immigration-discussion-board/forums/permanent-residence-in-canada.57/',\n",
       " 'Temporary Residence in Canada (Work, Study, Visit)\\nNew': '/canada-immigration-discussion-board/forums/temporary-residence-in-canada-work-study-visit.58/',\n",
       " 'H-1B Holders in the U.S.\\nNew': '/canada-immigration-discussion-board/forums/h-1b-holders-in-the-u-s.59/',\n",
       " 'Foreign Workers\\nNew': '/canada-immigration-discussion-board/forums/foreign-workers.10/',\n",
       " 'International Students\\nNew': '/canada-immigration-discussion-board/forums/international-students.2/',\n",
       " 'Visitors\\nNew': '/canada-immigration-discussion-board/forums/visitors.8/',\n",
       " 'Settlement Issues\\nNew': '/canada-immigration-discussion-board/forums/settlement-issues.14/',\n",
       " 'Permanent Residency Obligations\\nNew': '/canada-immigration-discussion-board/forums/permanent-residency-obligations.11/',\n",
       " 'Citizenship\\nNew': '/canada-immigration-discussion-board/forums/citizenship.12/',\n",
       " 'Housing\\nNew': '/canada-immigration-discussion-board/forums/housing.39/',\n",
       " 'Education\\nNew': '/canada-immigration-discussion-board/forums/education.41/',\n",
       " 'Health\\nNew': '/canada-immigration-discussion-board/forums/health.40/',\n",
       " 'Finding Work in Canada\\nNew': '/canada-immigration-discussion-board/forums/finding-work-in-canada.21/',\n",
       " 'Canadian Finance and Taxation\\nNew': '/canada-immigration-discussion-board/forums/canadian-finance-and-taxation.25/',\n",
       " 'Start Your Own Business in Canada – Self Employmen\\nNew': '/canada-immigration-discussion-board/forums/start-your-own-business-in-canada-%E2%80%93-self-employmen.22/',\n",
       " 'Canadian Labour Legislation\\nNew': '/canada-immigration-discussion-board/forums/canadian-labour-legislation.23/',\n",
       " 'Resources for Finding a Canadian Job\\nNew': '/canada-immigration-discussion-board/forums/resources-for-finding-a-canadian-job.24/',\n",
       " 'Visa Offices in North America\\nNew': '/canada-immigration-discussion-board/forums/visa-offices-in-north-america.18/',\n",
       " 'Visa Offices in South America\\nNew': '/canada-immigration-discussion-board/forums/visa-offices-in-south-america.19/',\n",
       " 'Visa Offices in Europe\\nNew': '/canada-immigration-discussion-board/forums/visa-offices-in-europe.17/',\n",
       " 'Visa Offices in Asia\\nNew': '/canada-immigration-discussion-board/forums/visa-offices-in-asia.16/',\n",
       " 'Visa Offices in Africa\\nNew': '/canada-immigration-discussion-board/forums/visa-offices-in-africa.15/',\n",
       " 'Visa Offices in Oceana\\nNew': '/canada-immigration-discussion-board/forums/visa-offices-in-oceana.20/'}"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "topic_titles_and_links"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('titles_and_links.csv', mode='w') as csv_file:\n",
    "    fieldnames = ['title', 'link']\n",
    "    writer = csv.DictWriter(csv_file, fieldnames=fieldnames)\n",
    "\n",
    "    writer.writeheader()\n",
    "    for key, value in topic_titles_and_links.items():\n",
    "        writer.writerow({'title': key, 'link': value})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sample_links(titles_and_links, titles, sample_size):\n",
    "   num_links = len(titles_and_links)\n",
    "   sample_titles_and_links = {}\n",
    "   ids = []\n",
    "\n",
    "   #This code creates an array of topic ids that are random and unique\n",
    "   if sample_size < num_links:\n",
    "       for i in range(0, sample_size):\n",
    "           x = -1\n",
    "            \n",
    "           while not(x in ids):\n",
    "               x = random.randint(0, num_links)\n",
    "               ids.append(x)\n",
    "\n",
    "   # Now create the topic sample\n",
    "   if len(ids) > 0:\n",
    "       for i in ids:\n",
    "           if (i < len(titles)):\n",
    "               key = titles[i]\n",
    "               sample_titles_and_links[key] = titles_and_links[key]\n",
    "        \n",
    "   return sample_titles_and_links\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "def data_frame(message_ids, links, date_contents, username_contents, message_contents, countries, likes, topic_contents, thread_contents):\n",
    "    base_data_frame = pd.DataFrame({ \"ID\": message_ids, \n",
    "                                \"Link\": links, \n",
    "                                \"Date\": date_contents,\n",
    "                                \"Username\": username_contents, \n",
    "                                \"Message\": message_contents, \n",
    "                                \"Country\": countries, \n",
    "                                \"Like\": likes, \n",
    "                                \"Topic\": topic_contents, \n",
    "                                \"Thread\": thread_contents})\n",
    "    return base_data_frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "def write_csv(file_name, base_data_frame):\n",
    "    with open(file_name, \"w\", errors='surrogatepass') as _file:\n",
    "        writer = csv.writer(_file)\n",
    "        #writer.writerow(row)\n",
    "        writer.writerow(base_data_frame.columns.values)\n",
    "        for index, row in base_data_frame.iterrows():\n",
    "            writer.writerow(row)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "SAMPLE_SIZE = 3\n",
    "PAGE_SAMPLE_SIZE = 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "topic_sample_titles_and_links = sample_links(topic_titles_and_links, topic_titles, SAMPLE_SIZE)\n",
    "##print(topic_sample_titles_and_links)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "##print(topic_sample_titles_and_links)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing  Quebec Immigration\n",
      "New\n",
      "Count of topic pages: 45\n",
      "Topic URL: https://www.canadavisa.com/canada-immigration-discussion-board/forums/quebec-immigration.55/page-23\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/csq-status-change-from-waiting-for-treatment-to-d%C3%A9cision.483872/\n",
      "Count of thread pages: 5\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/csq-questions.518140/\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/quebec-investor-class.522608/\n",
      "Topic URL: https://www.canadavisa.com/canada-immigration-discussion-board/forums/quebec-immigration.55/page-7\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/questions-outland-inland-spousal-sponsorship-study-work-visa-quebec-residency.639275/\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/rules-for-pr-in-quebec.635331/\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/mistake-in-marital-status-change-by-immigration.587198/\n",
      "Topic URL: https://www.canadavisa.com/canada-immigration-discussion-board/forums/quebec-immigration.55/page-39\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/from-where-to-start.403599/\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/french-points-for-skilled-worker.407062/\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/temporary-resident-to-permanent-resident-via-csq.407298/\n",
      "Processing  Caregiver Pathways\n",
      "New\n",
      "Count of topic pages: 3\n",
      "Topic URL: https://www.canadavisa.com/canada-immigration-discussion-board/forums/caregiver-pathways.65/\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/applicants-inside-canada-for-hccp-with-dependents-outside-canada.676027/\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/how-long-does-it-takes-to-get-a-work-permit-under-hccp.670406/\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/parents-needing-a-nanny-gather-here-caregiver-pathway.664324/\n",
      "Count of thread pages: 2\n",
      "Topic URL: https://www.canadavisa.com/canada-immigration-discussion-board/forums/caregiver-pathways.65/page-2\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/interim-pathway-for-caregivers-program.643607/\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/application-does-not-meet-the-requirements-of-irpa-and-irpr-due-to.619060/\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/just-in-launching-2-new-pilots.637538/\n",
      "Count of thread pages: 2\n",
      "Topic URL: https://www.canadavisa.com/canada-immigration-discussion-board/forums/caregiver-pathways.65/page-3\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/new-pathways-ielts.616053/\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/waiting-time-once-the-spousal-sponsorship-application-has-been-sentf.619134/\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/medical-problem.617943/\n",
      "Processing  Temporary Residence in Canada (Work, Study, Visit)\n",
      "New\n",
      "Count of topic pages: 92\n",
      "Topic URL: https://www.canadavisa.com/canada-immigration-discussion-board/forums/temporary-residence-in-canada-work-study-visit.58/page-87\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/tourist-visa-from-egypt.488127/\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/confirm-supporting-documents-required-for-canada-tourism-visa.489086/\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/decleration-of-common-law-union.489795/\n",
      "Topic URL: https://www.canadavisa.com/canada-immigration-discussion-board/forums/temporary-residence-in-canada-work-study-visit.58/page-51\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/trv-processing-time-expired.587294/\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/canada-jan-2019-study-visa-got-rejected.587780/\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/extend-supervisa-stay.586749/\n",
      "Topic URL: https://www.canadavisa.com/canada-immigration-discussion-board/forums/temporary-residence-in-canada-work-study-visit.58/page-46\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/study-permit.596867/\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/conditional-offer-letter.597236/\n",
      "Thread URL: https://www.canadavisa.com/canada-immigration-discussion-board/threads/entry-to-the-canada-without-return-of-home-country.598276/\n"
     ]
    }
   ],
   "source": [
    "\n",
    "total_message_ids = list()\n",
    "total_links = list()\n",
    "total_date_contents = list()\n",
    "total_username_contents = list()\n",
    "total_message_contents = list()\n",
    "total_countries = list()\n",
    "total_likes = list()\n",
    "total_topic_contents = list()\n",
    "total_thread_contents = list()\n",
    "\n",
    "\n",
    "message_ids = list()\n",
    "links = list()\n",
    "date_contents = list()\n",
    "username_contents = list()\n",
    "message_contents = list()\n",
    "countries = list()\n",
    "likes = list()\n",
    "topic_contents = list()\n",
    "thread_contents = list()\n",
    "counter = 0\n",
    "thread_counter = 0\n",
    "thread_page_counter = 0\n",
    "\n",
    "# Full data set\n",
    "#for key, value in topic_titles_and_links.items():\n",
    "# Random sample\n",
    "for key, value in topic_sample_titles_and_links.items():\n",
    "    counter = counter + 1\n",
    "\n",
    "# For debugging only - COMMENT OUT LATER\n",
    "   # if counter > 2:\n",
    "    #    break\n",
    "    topic_url = 'https://www.canadavisa.com' + value \n",
    "    topic_title = key\n",
    "\n",
    "    print(\"Processing \", topic_title)\n",
    "    try:\n",
    "        topic_content = bs(requests.get(topic_url).text, 'html.parser')\n",
    "        # Count number of page nav elements\n",
    "        page_nav_count = len(topic_content.select('li.pageNav-page'))\n",
    "        tc_last_page = int(topic_content.select('li.pageNav-page')[page_nav_count - 1].text)\n",
    "        print(\"Count of topic pages: \" + str(tc_last_page))\n",
    "        #tc_last_page = int(re.search('Page \\d* of (\\d*)', topic_content.select('li.pageNav-page')[0].text).group(1))\n",
    "    except Exception as i:\n",
    "        pass\n",
    "        \n",
    "    #for x in range(1, tc_last_page + 1):\n",
    "    topic_sample = range(1, tc_last_page + 1)\n",
    "    if (len(topic_sample) > PAGE_SAMPLE_SIZE):\n",
    "        topic_sample = random.sample(topic_sample, PAGE_SAMPLE_SIZE)\n",
    "    for x in topic_sample:\n",
    "# For debugging only - COMMENT OUT LATER\n",
    "        topic_url = 'https://www.canadavisa.com' + value\n",
    "        if x > 1:\n",
    "            topic_url = topic_url + 'page-'+ str(x)\n",
    "        print(\"Topic URL: \" + topic_url)\n",
    "        topic_content = bs(requests.get(topic_url).text, 'html.parser')\n",
    "        threads = topic_content.find_all('div', {'class':'structItem-title'})\n",
    "        threads_titles = list(map(lambda subtopic: subtopic.find('a').text.strip(), threads))\n",
    "        thread_titles_and_links = dict(map(lambda subtopic: (subtopic.find('a').text.strip(), subtopic.find('a') ['href']), threads))\n",
    "\n",
    "        # Randomise threads\n",
    "        thread_sample_titles_and_links = sample_links(thread_titles_and_links, threads_titles, SAMPLE_SIZE)\n",
    "        thread_counter = 1\n",
    "\n",
    "        \n",
    "        for st_key, st_value in thread_sample_titles_and_links.items():\n",
    "            thread_counter = thread_counter + 1\n",
    "            thread_url = 'https://www.canadavisa.com' + st_value\n",
    "            print(\"Thread URL: \" + thread_url)\n",
    "            thread_title = st_key\n",
    "            thread_content = bs(requests.get(thread_url).text, 'html.parser')\n",
    "\n",
    "            last_page = 1\n",
    "            try:\n",
    "                thread_page_nav_count = len(thread_content.select('li.pageNav-page'))\n",
    "                #last_page = int(re.search('Page \\d* of (\\d*)', thread_content.select('li.pageNav-page')[0].text).group(1))\n",
    "                last_page = int(thread_content.select('li.pageNav-page')[thread_page_nav_count - 1].text)\n",
    "                print(\"Count of thread pages: \" + str(last_page))\n",
    "            except Exception as e: \n",
    "                pass\n",
    "            \n",
    "            #for y in range(1, last_page):\n",
    "            thread_sample = range(1, last_page + 1)\n",
    "            if (len(thread_sample) > PAGE_SAMPLE_SIZE):\n",
    "                thread_sample = random.sample(thread_sample, PAGE_SAMPLE_SIZE)\n",
    "\n",
    "            for y in thread_sample:\n",
    "# For debugging only - COMMENT OUT LATER\n",
    "                #if y > 3:\n",
    "                #    break\n",
    "\n",
    "                thread_url = 'https://www.canadavisa.com' + st_value\n",
    "                if y > 1:\n",
    "                    thread_url = thread_url + 'page-' + str(y)\n",
    "                    \n",
    "                thread_content = bs(requests.get(thread_url).text, 'html.parser')\n",
    "                #CHANGED - WORKS\n",
    "                messages = thread_content.select('div.bbWrapper')\n",
    "                #NOT WORKING - IDS CONCEALED \n",
    "                message_urls = list(map(lambda permLink: permLink['href'], thread_content.select('div.message-attribution-main > a')))\n",
    "                message_reactions = thread_content.select('div.message-userExtras > dl:nth-of-type(3) > dd')\n",
    "                message_reactionsbar = thread_content.select('div.reactionsBar')\n",
    "                message_likes = list(map(lambda rb: len(rb.select('bdi')), message_reactionsbar))\n",
    "                times = thread_content.select('time')\n",
    "                if (times is not None):\n",
    "                    message_dates = list(map(lambda date: date.decode_contents().strip(), times))\n",
    "                message_usernames = thread_content.select('a.username')\n",
    "                message_list = list(map(lambda message: (message.decode_contents().strip()), messages))\n",
    "                usernames_list = list(map(lambda a: a.text.strip(), message_usernames))\n",
    "                for idx, m in enumerate(message_list):\n",
    "                    #message_id = \"\"\n",
    "                    #try:\n",
    "                     #   message_id = re.search('post-(\\d*)', m_ids[idx]['id']).group(1)\n",
    "                    #except IndexError:\n",
    "                     #   message_id = \"\"\n",
    "                    #message_ids.append(message_id)\n",
    "                    message_ids.append(0)\n",
    "                    link = \"\"\n",
    "                    try:\n",
    "                        link = 'https://www.canadavisa.com/' + message_urls[idx]\n",
    "                    except IndexError:\n",
    "                        link = \"\"\n",
    "                    links.append(link)\n",
    "                    message_date = \"\"\n",
    "                    try:\n",
    "                        #message_date = message_dates[idx]['title']\n",
    "                        message_date = message_dates[idx]\n",
    "                    except IndexError:\n",
    "                        message_date = \"\"\n",
    "                    date_contents.append(message_date)\n",
    "                    message_username = \"\"\n",
    "                    try:\n",
    "                        message_username = usernames_list[idx]\n",
    "                    except IndexError:\n",
    "                        message_username = \"\"\n",
    "                    username_contents.append(message_username)\n",
    "                    \n",
    "                    message_contents.append(m.replace('\\n', \"\"))\n",
    "\n",
    "                    countries.append(\"NA\")\n",
    "                    like = 0\n",
    "                    try:\n",
    "                        like = message_likes[idx]\n",
    "                    except IndexError:\n",
    "                        like = 0\n",
    "                    likes.append(like)\n",
    "                    topic_contents.append(topic_title)\n",
    "                    thread_contents.append(thread_title)\n",
    "    # Here write the contents to a file, and re-set the data structures\n",
    "    base_data_frame = data_frame(message_ids, links, date_contents, username_contents, message_contents, countries, likes, topic_contents, thread_contents)\n",
    "    write_csv(\"can-forum-\" + str(counter) + \".csv\", base_data_frame)\n",
    "    total_message_ids.extend(message_ids)\n",
    "    total_links.extend(links)\n",
    "    total_date_contents.extend(date_contents)\n",
    "    total_username_contents.extend(username_contents)\n",
    "    total_message_contents.extend(message_contents)\n",
    "    total_countries.extend(countries)\n",
    "    total_likes.extend(likes)\n",
    "    total_topic_contents.extend(topic_contents)\n",
    "    total_thread_contents.extend(thread_contents)\n",
    "    message_ids = list()\n",
    "    links = list()\n",
    "    date_contents = list()\n",
    "    username_contents = list()\n",
    "    message_contents = list()\n",
    "    countries = list()\n",
    "    likes = list()\n",
    "    topic_contents = list()\n",
    "    thread_contents = list()\n",
    "\n",
    "total_base_data_frame = data_frame(total_message_ids, total_links, total_date_contents, total_username_contents, total_message_contents, total_countries, total_likes, total_topic_contents, total_thread_contents)    \n",
    "write_csv(\"can-forum-ALL.csv\", total_base_data_frame)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create empty frame\n",
    "#base_data_frame = pd.DataFrame({ \"ID\": message_ids, \"Link\": links, \"Date\": date_contents, \"Username\": username_contents, \"Message\": message_contents, \"Country\": [], \"Like\": [], \"Topic\": topic_contents, \"Thread\": thread_contents})\n",
    "base_data_frame = pd.DataFrame({ \"ID\": message_ids, \n",
    "                                \"Link\": links, \n",
    "                                \"Date\": date_contents,\n",
    "                                \"Username\": username_contents, \n",
    "                                \"Message\": message_contents, \n",
    "                                \"Country\": countries, \n",
    "                                \"Like\": likes, \n",
    "                                \"Topic\": topic_contents, \n",
    "                                \"Thread\": thread_contents})\n",
    "print('Finished')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "len(base_data_frame)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# from https://github.com/pandas-dev/pandas/issues/22610\n",
    "import csv\n",
    "with open(\"can-forum.csv\", \"w\", errors='surrogatepass') as _file:\n",
    "    writer = csv.writer(_file)\n",
    "    #writer.writerow(row)\n",
    "    writer.writerow(base_data_frame.columns.values)\n",
    "    for index, row in base_data_frame.iterrows():\n",
    "        writer.writerow(row)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "base_data_frame.iloc[0:100]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#print(topic_content)\n",
    "tc_last_page = int(re.search('Page \\d* of (\\d*)', topic_content.select('h3', {'class':'pageNav-page'})))\n",
    "print(tc_last_page)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "https://www.canadavisa.com/canada-immigration-discussion-board/forums/quebec-immigration.55/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "int(re.search('Page \\d* of (\\d*)', 'Page 1 of 1280').group(1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "thread_sample_titles_and_links = sample_links(thread_titles_and_links, threads_titles, SAMPLE_SIZE)\n",
    "#print(thread_sample_titles_and_links)\n",
    "for st_key, st_value in thread_sample_titles_and_links.items():\n",
    "            thread_counter = thread_counter + 1\n",
    "thread_url = 'https://www.canadavisa.com' + st_value\n",
    "print(thread_url)\n",
    "thread_content = bs(requests.get(thread_url).text, 'html.parser')\n",
    "last_page = 1\n",
    "try:\n",
    "    last_page = int(re.search('Page \\d* of (\\d*)', thread_content.select('li.pageNav-page')[0].text).group(1))\n",
    "except Exception as e: \n",
    "    print(e)\n",
    "    for x in range(1, last_page + 1):\n",
    "# For debugging only - COMMENT OUT LATER\n",
    "                #if x > 3:\n",
    "               #     break\n",
    "            \n",
    "                    #thread_url = 'https://www.canadavisa.com' + st_value\n",
    "                if x > 1:\n",
    "                    thread_url = thread_url + 'page-' + str(x)\n",
    "                print(thread_url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "thread_content = bs(requests.get(thread_url).text, 'html.parser')\n",
    "#print(thread_content)\n",
    "message_usernames = thread_content.select('a.username')\n",
    "usernames_list = list(map(lambda a: a.text.strip(), message_usernames))\n",
    "tc_last_page = int(re.search('Page \\d* of (\\d*)', topic_content.select('div.pageNav-page')[0].text).group(1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(sample_titles_and_links)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
